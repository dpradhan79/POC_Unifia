package AdminUserStories.Scopes;

import org.graphwalker.core.machine.ExecutionContext;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import TestFrameWork.TestHelper;
import TestFrameWork.UnifiaAdminGeneralFunctions.GeneralFunc;
import TestFrameWork.UnifiaAdminLandingPage.LandingPage_Actions;
import TestFrameWork.UnifiaAdminLandingPage.LandingPage_Verification;
import TestFrameWork.UnifiaAdminScopePage.*;
import TestFrameWork.UnifiaAdminScopeTypePage.ScopeType_Actions;
import TestFrameWork.UnifiaAdminScopeTypePage.ScopeType_Verification;

public class ScopeDetails_GWAPI extends ExecutionContext {

	public GeneralFunc SE_Gen; //shortcut to link to the UnifiaAdminGeneralFunctions java class.
	public Scope_Actions sa;
	public Scope_Verification sv;
	
	public int Scope_DB; //DB ID number from scope table
	public String ScopeName; //Scope name
	public String ScopeName_Act; //Actual Scope name
	public String ScopeRF; //ScopeRFUID
	public String ScopeSNo; //Scope Serial Number
	public String ScopeSNo_Act; //Actual Scope Serial Number to be entered
	public String ScopeType; //Scope association to scope model
	public String ScopeFacility; // Scope association to facility
	public String ScopeFacility_Active; // facility active status
	public String ScopeStatus;  //This field will track the status of the scope (active or inactive)
	public String ScopeComment;
	public String ScopeComment_Act; //Actual Scope Comment in Unifia
	public String ScopeType_Act; // Actual ScopeType
	public String DefaultScopeName; //Scope Name generated by system
	public int UpdatedFacilityDB;
	public String ScopeRF_Act; // Actual ScopeRFUID to be entered in to Unifia
	public int ScopeType_DB; //DB ID number from scopetype table
	public ResultSet Scope_rs; //Result Set for Scope Name
	public ResultSet ScopeType_rs; //Result Set for Scope Type

	public String ScopeTypeSame;
	public int ScopeTypeSame_DB;
	public String ScopeTypeSame_list;

	
	public String Expected;
	public String Vertex;
	public String stm;
	public long cal = Calendar.getInstance().getTimeInMillis();
	public int calint; //integer counter for cal
	public String calchk; //change calint to a string
	
	//Implements the user act descriptions for each edge
	public String Description;

	public int ModifyScopeDB; //The Scope DB ID for the scope to be modified.
	public int ModifyFacilityDB;//
	public String ModScopeRF; //scopeRFID to modify
	public String ModScopeSN; //scope serial number to modify
	public String ModScopeStatus;// scope status to be modified
	public String ModifyScopeNameValue; //the Scope name to be modified.
	public String ModScopeAct_Val; //the current Active value of the scope name that will be modified.
	public String ModScopeFacility; //The facility name associated with the scope that is being modified.
	public int ModScopeFacilityID; // The facility ID associated with the scope
	public String ModScopeType; // The scope's type associated with the scope that is being modified
	public String UpdatedScopeFacility; //the facility to be updated for scope
	public static String Result; //Result of a verification point
	public String CommentResult;
	public String SNoResult;
	public String RFUIDResult;
	public String STResult;
	public static String GridID; //Grid ID of the row in the Scope List that will be edited or verified. 	
	public String ErrCode; //Error Code Text to be verified.
	
	public static String actualResult="\t\t\t ScopeDetail_TestSummary \n"; 
	public String ForFileName;
	public String TestResFileName="ScopeDetail_TestSummary_";
	public boolean startflag=false;
	public TestFrameWork.TestHelper TH;
	public int Scenario=1;
	public boolean ScenarioStartflag=true;

	public String Path;//Implements a variable to determine new or modify for expected result.
	public Connection conn= null;

	
	//implements the edges for the scope graphml
	
	public void e_Start(){
		//empty edge to start graph
	}
	public void e_New()throws InterruptedException{
		ScenarioStartflag=true;
		Path="New";
		Vertex="e_New";
		//System.out.println("e_New; Path="+Path);
		sa.Add_New_Scope();
		Result=sv.Verify_ScopeStatus_New("True");
		Expected= "The scope is set to Active by Default.";
		Description="The scope is set to Active by Default.";
		System.out.println("Vertex:"+Vertex+"; Expected=:"+Expected);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_Modify() throws InterruptedException{
		ScenarioStartflag=true;
		Path="Modify";
		//System.out.println("e_Modify; Path="+Path);
		try{
			conn=DriverManager.getConnection(TestFrameWork.TestHelper.FrameworkDBConnection());

			Statement statement = conn.createStatement();
			stm="Select sc.idScope, sc.ScopeName, sc.FacilityID, st.EnteredScopeTypeName, sc.RFUID, sc.ScopeStatus, sc.SerialNumber from scope sc join scopetype st on st.IDscopetype= sc.ScopeTypeID WHERE SC.TestKeyword='Existing' AND sc.UpdateDate=(Select Min(UpdateDate) FROM scope sc where sc.TestKeyword='Existing')";
					
					
			Scope_rs = statement.executeQuery(stm);
			while(Scope_rs.next()){
				ModifyScopeDB= Scope_rs.getInt(1); //the first variable in the set is the ID row in the database.
				ModifyScopeNameValue= Scope_rs.getString(2); //the third variable is the Entered scope name
				ModScopeFacilityID= Scope_rs.getInt(3); // the fifth variable is the Facility ID associated to the scope
				ModScopeType= Scope_rs.getString(4); //the sixth variable is the scope's type Association
				ModScopeRF= Scope_rs.getString(5); //the seventh variable in the set is the ID row in the database.
				ModScopeStatus= Scope_rs.getString(6); //the eighth variable is the Scope's Type
				ModScopeSN= Scope_rs.getString(7); //the eighth variable is the Scope SN to be modified
			}
									
			Scope_rs.close();
			System.out.println("ModifyScopeDB = "+ModifyScopeDB);
			System.out.println("ModifyScopeNameValue = "+ModifyScopeNameValue);	
			System.out.println("ModScopeFacilityID = "+ModScopeFacilityID);
			System.out.println("ModScopeType = "+ModScopeType);
			System.out.println("ModScopeRF = "+ModScopeRF);
			System.out.println("ModScopeStatus = "+ModScopeStatus);
			System.out.println("ModScopeSN = "+ModScopeSN);

			statement.close(); //close the query to get the variable information from the DB
			conn.close();
		}
	
		catch (SQLException ex){
		    // handle any errors
		    System.out.println("SQLException: " + ex.getMessage());
		    System.out.println("SQLState: " + ex.getSQLState());
		    System.out.println("VendorError: " + ex.getErrorCode());
		}
	
		sa.Search_Scope_ByName(ModifyScopeNameValue);
		sa.Search_Scope_ByRFUID(ModScopeRF);
		sa.Search_Scope_BySerialNumber(ModScopeSN);
		GridID=sa.GetGridID_Scope_To_Modify(ModifyScopeNameValue);
		ModScopeAct_Val=sa.Scope_Active_Value(ModifyScopeNameValue);

		sa.Select_Scope_To_Modify(ModifyScopeNameValue);
		System.out.println("e_Modify; Scope: " +ModifyScopeNameValue+" is selected");	
		Description="Scope: " +ModifyScopeNameValue+" is selected";
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_ScopeNameExisting() throws  InterruptedException{
			ScopeName= "Existing";
			try{ 
				conn=DriverManager.getConnection(TestFrameWork.TestHelper.FrameworkDBConnection());
				if(Path.equalsIgnoreCase("New")){
					stm="Select idScope, ScopeName FROM scope Where TestKeyword='Existing' and UpdateDate=(Select Min(UpdateDate) from scope Where TestKeyword='Existing')"; 
				}else if(Path.equalsIgnoreCase("Modify")){
					stm="Select idScope, ScopeName FROM scope Where ScopeName !='"+ModifyScopeNameValue+"' AND TestKeyword='Existing' and UpdateDate=(Select Min(UpdateDate) from scope Where ScopeName !='"+ModifyScopeNameValue+"' AND TestKeyword='Existing')";; //put sql statement here to find ID
				}
				
				Statement statement = conn.createStatement();
				Statement update = conn.createStatement();
				Scope_rs = statement.executeQuery(stm);
				while(Scope_rs.next()){
					Scope_DB= Scope_rs.getInt(1); //the first variable in the set is the ID row in the database.
					ScopeName_Act= Scope_rs.getString(2); //the second variable in the set is name to be modified in the database.
				}
				Scope_rs.close();
			}
			catch (SQLException ex){
			    // handle any errors
			    System.out.println("SQLException: " + ex.getMessage());
			    System.out.println("SQLState: " + ex.getSQLState());
			    System.out.println("VendorError: " + ex.getErrorCode());	
			}

				
		if (Path.equalsIgnoreCase("New")){
			sa.Enter_New_Scope_Name(ScopeName_Act);
		}
		else if (Path.equalsIgnoreCase("Modify")){
			sa.Modify_Scope_Name(GridID,ScopeName_Act);
		}
		Description="User enters "+ScopeName_Act+" in the scope name field.  They are using a "+Path+" path.";
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}

	public void e_ScopeNameValid() throws  InterruptedException{
		ScopeName="Valid";
		calint++;
		calchk=String.valueOf(calint);
		if(calchk.equals(1000)){
			calint=0;
			calchk="0";
		}
		ScopeName_Act="Scope"+cal+calchk;
		if(Path.equalsIgnoreCase("New")){		
			sa.Enter_New_Scope_Name(ScopeName_Act);
		} else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_Scope_Name(GridID,ScopeName_Act);
		}
		Description="User enters "+ScopeName_Act+" in the scope name field.  They are using a "+Path+" path.";
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);

	}
	
	  public void e_ScopeNameNull() throws  InterruptedException{
		ScopeName="";
		
		ScopeName_Act=ScopeName; //null value from graph
		
				
		if (Path.equalsIgnoreCase("New")){
			sa.Enter_New_Scope_Name(ScopeName_Act);
		}
		else if (Path.equalsIgnoreCase("Modify")){
			sa.Modify_Scope_Name(GridID,ScopeName_Act);
			}
		Description="User enters "+ScopeName_Act+" in the scope name field.  They are using a "+Path+" path.";
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	  public void e_ScopeNameSame() throws  InterruptedException{
		ScopeName="Same";
		ScopeName_Act=ModifyScopeNameValue;
			
		Description="User enters "+ScopeName_Act+" in the scope name field.  They are using a "+Path+" path.";
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}  
	
	
	public void e_StatusActive() {
		ScopeStatus= "True";
		
		if(Path.equalsIgnoreCase("New")){ //If the path is new, set the Status field. 
			sa.Selct_New_ScopeStatus(ScopeStatus);
		}else if(Path.equalsIgnoreCase("Modify")) { //If the path is modify set the status field for the row being modified as per the graph
			//ModScopeAct_Val=sa.Scope_Active_Value(GridID);
			sa.Selct_Modify_ScopeStatus(GridID,ModScopeAct_Val,ScopeStatus);
		}
		Description="The user selects "+ScopeStatus+" in the scope status field.";
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}	
	
	public void e_StatusInactive() {
		ScopeStatus="False";
		if(Path.equalsIgnoreCase("New")){ //If the path is new, set the Status field. 
			sa.Selct_New_ScopeStatus(ScopeStatus);
		}else if(Path.equalsIgnoreCase("Modify")) { //If the path is modify set the status field for the row being modified as per the graph
			//ModScopeAct_Val=sa.Scope_Active_Value(GridID);
			sa.Selct_Modify_ScopeStatus(GridID,ModScopeAct_Val,ScopeStatus);
		}
		Description="The user selects "+ScopeStatus+" in the scope status field.";
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_ScopeFacilityNull() throws  InterruptedException{
		ScopeFacility="";
		UpdatedFacilityDB=0;
		UpdatedScopeFacility=ScopeFacility;
			if(Path.equalsIgnoreCase("New")){
			   sa.Selct_New_Scope_Facility(UpdatedScopeFacility);
		    } else if(Path.equalsIgnoreCase("Modify")){
			   sa.Selct_Modify_Scope_Facility(GridID,UpdatedScopeFacility);
		    }
				
		Description="The user selects "+UpdatedScopeFacility+" in the facility field.";
		System.out.println(Description);
		UpdatedFacilityDB=0;
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_ScopeFacilityActive() throws  InterruptedException{
		ScopeFacility="Active";
			try{
				conn=DriverManager.getConnection(TestFrameWork.TestHelper.FrameworkDBConnection());
				Statement statement = conn.createStatement();
				Statement update= conn.createStatement();
				if(Path.equalsIgnoreCase("New")){
				   stm="Select idFacility, EnteredFacilityName from facility where Active='True' and TestScenario='Scope' and LastUsed=(Select Min(LastUsed) from facility Where Active='True' and TestScenario='Scope')";

				}else{
				   stm="Select fac.idFacility, fac.EnteredFacilityName from facility fac where fac.Active='True' and fac.TestScenario='Scope' and fac.idFacility!='"+ModScopeFacilityID+"' and LastUsed=(Select Min(LastUsed) from facility Where Active='True' and TestScenario='Scope' and idFacility!='"+ModScopeFacilityID+"')";

				}
				Scope_rs = statement.executeQuery(stm); //Get a facility name not equal to the Facility currently associated to the scope being modified.
				while(Scope_rs.next()){
					UpdatedFacilityDB= Scope_rs.getInt(1); //the first variable in the set is the ID row in the database.
					UpdatedScopeFacility= Scope_rs.getString(2); //the second variable is the entered location name
				}
				Scope_rs.close();
				stm="Update facility SET LastUsed=CURRENT_TIMESTAMP WHERE idFacility="+UpdatedFacilityDB;
				update.executeUpdate(stm); // update the UpdateDate variable of the row of data used to the current date/time stamp.
				update.close();
				statement.close(); //close the query to get the variable information from the DB
				conn.close();
				System.out.println("UpdatedScopeFacility"+UpdatedScopeFacility);
			}
			catch (SQLException ex){
			    // handle any errors
			    System.out.println("SQLException: " + ex.getMessage());
			    System.out.println("SQLState: " + ex.getSQLState());
			    System.out.println("VendorError: " + ex.getErrorCode());	
			}
			if(Path.equalsIgnoreCase("New")){
			   sa.Selct_New_Scope_Facility(UpdatedScopeFacility);
		    } else if(Path.equalsIgnoreCase("Modify")){
			   sa.Selct_Modify_Scope_Facility(GridID,UpdatedScopeFacility);
		    }
				
		Description="The user selects "+UpdatedScopeFacility+" in the facility field.";
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}

	public void e_ScopeType1(){
		//empty edge for navigation purposes
		System.out.println("e_ScopeType1");
		Description="ScopeSNo!=SMSameExisting";
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}

	public void e_ScopeType2(){
		//empty edge for navigation purposes
		System.out.println("e_ScopeType2");
		Description="ScopeSNo!=SMDiffExisting";
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_SMSameSNoSame() throws InterruptedException{
		ScopeType= "e_SMSameSNoSame"; //read value from graph edge
		System.out.println("e_SMSameSNoSame");
		if(Path.equalsIgnoreCase("New")){
			sa.Selct_New_ScopeType(ScopeType_Act);
		}else if(Path.equalsIgnoreCase("Modify")) {
			sa.Selct_Modify_ScopeType(GridID,ScopeType_Act);
		}
		Description= "ScopeType_Act="+ScopeType_Act;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_SMDiffSNoSame() throws InterruptedException{

		System.out.println("e_SMDiffSNoSame");
		ScopeType= "e_SMDiffSNoSame"; //read value from graph edge

		System.out.println("e_SMDiffSNoSame");
		if(Path.equalsIgnoreCase("New")){
			sa.Selct_New_ScopeType(ScopeType_Act);
		}else if(Path.equalsIgnoreCase("Modify")) {
			sa.Selct_Modify_ScopeType(GridID,ScopeType_Act);
		}
		Description= "ScopeType_Act="+ScopeType_Act;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);

	}
	
	public void e_ScopeTypeValid() throws  InterruptedException{
		ScopeType= "Valid"; //read value from graph edge
		
		System.out.println(Description);
			try{
				conn=DriverManager.getConnection(TestFrameWork.TestHelper.FrameworkDBConnection());
				Statement statement = conn.createStatement();
				Statement update= conn.createStatement();
				//changed TestKeyword to 'Scope' from ' Existing' to handle dependency issue
				stm="Select st.idScopeType, st.EnteredScopeTypeName from scopetype st WHERE st.TestKeyword='Scope' AND st.ScopeTypeActive='True'  and st.UpdateDate=(Select Min(st.UpdateDate) from scopetype st Where st.TestKeyword='Scope' AND st.ScopeTypeActive='True')";
				System.out.println(stm);
				Scope_rs = statement.executeQuery(stm);
				while(Scope_rs.next()){
					ScopeType_DB= Scope_rs.getInt(1); //the first variable in the set is the ID row in the database.
					ScopeType_Act= Scope_rs.getString(2); //the second variable is the scope base name
		         }
				Scope_rs.close();
				System.out.println("Actual ScopeType = "+ScopeType_Act);
				
				stm="Update scopetype SET UpdateDate=CURRENT_TIMESTAMP WHERE idScopeType="+ScopeType_DB;
				update.executeUpdate(stm); // update the UpdateDate variable of the row of data used to the current date/time stamp.
				update.close();
				
				}
				catch (SQLException ex){
				    // handle any errors
				    System.out.println("SQLException: " + ex.getMessage());
				    System.out.println("SQLState: " + ex.getSQLState());
				    System.out.println("VendorError: " + ex.getErrorCode());
				}
			if(Path.equalsIgnoreCase("New")){
				sa.Selct_New_ScopeType(ScopeType_Act);
			}else if(Path.equalsIgnoreCase("Modify")) {
				sa.Selct_Modify_ScopeType(GridID,ScopeType_Act);
			}
			Description= "Actual ScopeType = "+ScopeType_Act;	
			actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
			TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_ScopeTypeNull() throws  InterruptedException{
		ScopeType=""; //read value from graph edge
		ScopeType_Act=ScopeType;
		if(Path.equalsIgnoreCase("New")){
			sa.Selct_New_ScopeType(ScopeType_Act);
		}else if(Path.equalsIgnoreCase("Modify")) {
			sa.Selct_Modify_ScopeType(GridID,ScopeType_Act);
		}
		Description= "e_ScopeTypeNull is selected from graph.";
		System.out.println(Description);
		Description= "Actual ScopeType = "+ScopeType_Act;	
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
		
	}
	

	
	public void e_RFUIDValid() {
		ScopeRF="Valid";

		calint++;
		calchk=String.valueOf(calint);
		if(calchk.equals(1000)){
			calint=0;
			calchk="0";
		}
		ScopeRF_Act="RF"+cal+calchk;
					
		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_RFUID(ScopeRF_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_RFUID(GridID,ScopeRF_Act);
		}
		Description ="ScopeRFUID="+ScopeRF_Act+"; Path="+Path;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_RFUIDExisting() {
		ScopeRF="Existing";

		try{
			conn=DriverManager.getConnection(TestFrameWork.TestHelper.FrameworkDBConnection());
			Statement statement = conn.createStatement();
			if(Path.equalsIgnoreCase("New")){
				stm="Select sc.idScope, sc.RFUID from scope sc WHERE sc.TestKeyword='Existing' and sc.RFUID !='' ";
			}else if(Path.equalsIgnoreCase("Modify")){
				stm="Select sc.idScope, sc.RFUID from scope sc WHERE sc.TestKeyword='Existing' and sc.RFUID !='"+ModScopeRF+"' and sc.RFUID !='' ";
			}
			System.out.println(stm);
			Scope_rs = statement.executeQuery(stm);
			while(Scope_rs.next()){
				Scope_DB= Scope_rs.getInt(1); //the first variable in the set is the ID row in the database.
				ScopeRF_Act= Scope_rs.getString(2); //the third variable is the scope RFID

	         }
			Scope_rs.close();
			System.out.println("Scope RFID = "+ScopeRF_Act);	

		}
		catch (SQLException ex){
	    // handle any errors
		    System.out.println("SQLException: " + ex.getMessage());
		    System.out.println("SQLState: " + ex.getSQLState());
		    System.out.println("VendorError: " + ex.getErrorCode());	
		}
		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_RFUID(ScopeRF_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_RFUID(GridID,ScopeRF_Act);
		}
		Description ="ScopeRFUID="+ScopeRF_Act+"; Path="+Path;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_RFUIDNull() {
		ScopeRF="";

		ScopeRF_Act=ScopeRF; // get null value from graph to enter
		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_RFUID(ScopeRF_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_RFUID(GridID,ScopeRF_Act);
		}
		Description ="ScopeRFUID="+ScopeRF_Act+"; Path="+Path;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	

	
	
	public void e_SMSameSNoExisting() {
		ScopeSNo="SMSameSNoExisting";

		try{
			conn=DriverManager.getConnection(TestFrameWork.TestHelper.FrameworkDBConnection());

			Statement statement = conn.createStatement();
			if(Path.equalsIgnoreCase("New")){
				stm="Select sc.idScope, sc.SerialNumber, st.EnteredScopeTypeName, st.idScopeType from scope sc join scopetype st on sc.ScopeTypeID=st.idScopeType WHERE sc.TestKeyword='Existing'";
			}else if(Path.equalsIgnoreCase("Modify")){
				stm="Select sc.idScope, sc.SerialNumber, st.EnteredScopeTypeName, st.idScopeType from scope sc join scopetype st on sc.ScopeTypeID=st.idScopeType WHERE sc.TestKeyword='Existing' and sc.SerialNumber !='"+ModScopeSN+"' ";
			}
			System.out.println("stm = "+stm);	

			Scope_rs = statement.executeQuery(stm);
			while(Scope_rs.next()){
				Scope_DB= Scope_rs.getInt(1); //the first variable in the set is the ID row in the database.
				ScopeSNo_Act= Scope_rs.getString(2); //the second variable is the scope RFID
				ScopeType_Act=Scope_rs.getString(3);
				ScopeType_DB= Scope_rs.getInt(4); 
	         }
			Scope_rs.close();
			System.out.println("ScopeSNo_Act = "+ScopeSNo_Act+" , ScopeType_Act="+ScopeType_Act);	
			System.out.println("ScopeSNo_Act = "+ScopeSNo_Act+" , ScopeType_Act="+ScopeType_Act);	

		}
		catch (SQLException ex){
		    // handle any errors
		    System.out.println("SQLException: " + ex.getMessage());
		    System.out.println("SQLState: " + ex.getSQLState());
		    System.out.println("VendorError: " + ex.getErrorCode());	
		}
		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_SerialNumber(ScopeSNo_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_SerialNumber(GridID,ScopeSNo_Act);
		}
		Description ="The user enters "+ScopeSNo_Act+" in the scope serial number field. Path="+Path;
		System.out.println(Description);	
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_SMDiffSNoExisting() {
		ScopeSNo="SMDiffExisting";

		try{
			conn=DriverManager.getConnection(TestFrameWork.TestHelper.FrameworkDBConnection());

			Statement statement = conn.createStatement();
			if(Path.equalsIgnoreCase("New")){
				stm="Select sc.idScope, sc.SerialNumber, sc.ScopeTypeID from scope sc WHERE sc.TestKeyword='Existing'";
			}else if(Path.equalsIgnoreCase("Modify")){
				stm="Select sc.idScope, sc.SerialNumber, sc.ScopeTypeID from scope sc WHERE sc.TestKeyword='Existing' and sc.SerialNumber !='"+ModScopeSN+"' ";
			}
			System.out.println("stm = "+stm);	

			Scope_rs = statement.executeQuery(stm);
			while(Scope_rs.next()){
				Scope_DB= Scope_rs.getInt(1); //the first variable in the set is the ID row in the database.
				ScopeSNo_Act= Scope_rs.getString(2); //the second variable is the scope RFID
				ScopeTypeSame_DB=Scope_rs.getInt(3);
	         }
			Scope_rs.close();

			//** Query added to get all the scope models assigned to the selected Serial Number(ScopeSNo_Act)
			stm = "select sc.ScopeTypeID from scope sc WHERE sc.TestKeyword='Existing' and sc.SerialNumber = '"+ScopeSNo_Act+"'";
			System.out.println("stm = "+stm);	
			Scope_rs = statement.executeQuery(stm);
			ScopeTypeSame_list = "";
			while(Scope_rs.next())
			{
				ScopeTypeSame_list=  ScopeTypeSame_list + "," + "'" + Scope_rs.getInt(1) + "'";
	         }
			ScopeTypeSame_list = ScopeTypeSame_list.replaceFirst(",", "");
			Scope_rs.close();
			
			//**Query updated to separate all scope models assigned to selected Serial number(ScopeSNo_Act)
			//stm="Select idScopeType, EnteredScopeTypeName from scopetype st join scope sc on st.idScopeType=sc.ScopeTypeID WHERE st.idScopeType!="+ScopeTypeSame_DB+" and sc.SerialNumber!='"+ScopeSNo_Act+"' and st.UpdateDate=(Select Min(st.UpdateDate) from scopetype st join scope sc on st.idScopeType=sc.ScopeTypeID Where st.idScopeType!="+ScopeTypeSame_DB+" and sc.SerialNumber!='"+ScopeSNo_Act+"')";
			stm="Select idScopeType, EnteredScopeTypeName from scopetype st join scope sc on st.idScopeType=sc.ScopeTypeID WHERE st.idScopeType NOT IN ("+ScopeTypeSame_list+") and sc.SerialNumber!='"+ScopeSNo_Act+"' and st.UpdateDate=(Select Min(st.UpdateDate) from scopetype st join scope sc on st.idScopeType=sc.ScopeTypeID Where st.idScopeType NOT IN ("+ScopeTypeSame_list+") and sc.SerialNumber!='"+ScopeSNo_Act+"')";
			System.out.println("stm = "+stm);	
			ScopeType_rs = statement.executeQuery(stm);
			while(ScopeType_rs.next()){
				ScopeType_DB= ScopeType_rs.getInt(1); //the first variable in the set is the ID row in the database.
				ScopeType_Act= ScopeType_rs.getString(2); //the second variable is the scope RFID
	         }
			ScopeType_rs.close();

			System.out.println("ScopeSNo_Act= "+ScopeSNo_Act+", ScopeType_Act="+ScopeType_Act);	
			System.out.println("ScopeSNo_Act= "+ScopeSNo_Act+", ScopeType_Act="+ScopeType_Act);	

		}
		catch (SQLException ex){
		    // handle any errors
		    System.out.println("SQLException: " + ex.getMessage());
		    System.out.println("SQLState: " + ex.getSQLState());
		    System.out.println("VendorError: " + ex.getErrorCode());	
		}
		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_SerialNumber(ScopeSNo_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_SerialNumber(GridID,ScopeSNo_Act);
		}
		Description ="The user enters "+ScopeSNo_Act+" in the scope serial number field. Path="+Path;
		System.out.println(Description);	
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_SNoNull() {
		ScopeSNo="";
		ScopeSNo_Act=ScopeSNo; // get null value from graph to enter
        
		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_SerialNumber(ScopeSNo_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_SerialNumber(GridID,ScopeSNo_Act);
		}
		Description ="The user enters "+ScopeSNo_Act+" in the scope serial number field. Path="+Path;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_SNoValid() {
		ScopeSNo="Valid";

		calint++;
		calchk=String.valueOf(calint);
		if(calchk.equals(1000)){
			calint=0;
			calchk="0";
		}
		ScopeSNo_Act="SN"+cal+calchk;
		
		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_SerialNumber(ScopeSNo_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_SerialNumber(GridID,ScopeSNo_Act);
		}
		Description ="The user enters "+ScopeSNo_Act+" in the scope serial number field. Path="+Path;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_CommentValid() {
		ScopeComment="Valid";
		ScopeComment_Act="ScopeComment entered at "+cal;

		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_Comment(ScopeComment_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_Comment(GridID,ScopeComment_Act);
		}
		Description ="The user enters "+ScopeComment_Act+" in the scope comment field. Path="+Path;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_CommentNull() {
		ScopeComment="";
		ScopeComment_Act=ScopeComment;
		
		if(Path.equalsIgnoreCase("New")){
			sa.Enter_New_Comment(ScopeComment_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			sa.Modify_Comment(GridID,ScopeComment_Act);
		}
		Description ="The user enters "+ScopeComment_Act+" in the scope comment field. Path="+Path;
		System.out.println(Description);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_Save()throws InterruptedException {
		Description= "The user Clicks the save button.";
		System.out.println(Description);
		sa.Save_Scope_Edit();
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void e_Cancel()throws InterruptedException {
		Description= "The user Clicks the Cancel button.";
		System.out.println(Description);
		sa.Cancel_Scope_Edit();
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	//implements the vertices for the scopes graphml
	
	public void v_Scope(){
		if(ScenarioStartflag==true){
			if(startflag==false){
				DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
				Date date = new Date();
				ForFileName = dateFormat.format(date); 
				startflag=true;
			}
			Vertex= getCurrentElement().getName();
			System.out.println("v_Scope; Vertex="+Vertex);
			Description="\r\n=====================================";
			Description+="\r\nStart of new Scenario - "+Scenario;
			actualResult=actualResult+"\r\n"+Description;
			TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
			Scenario++;
			ScenarioStartflag=false;
		}
	}
	
	public void v_ScopeDetail(){
		Vertex= getCurrentElement().getName();
		System.out.println("Vertex="+Vertex);
		System.out.println("v_ScopeDetail Path = "+Path);
		Description="Selected path is - "+Path;
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void v_ScopeType1(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	public void v_ScopeType2(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
		 
	}
	public void v_ScopeVerf1(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
		 
	}
	public void v_ScopeVerf2(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
	}
	public void v_ScopeVerf3(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
	}
	public void v_ScopeVerf4(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
	}
	public void v_ScopeVerf5(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
	}
	public void v_ScopeVer6(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
	}
	public void v_ScopeVer7(){
		//Empty vertex, used for logical verification navigation
		//System.out.println(getCurrentElement().getName());
	}
		
	
	public void v_ScopeName() throws InterruptedException{
		Vertex= getCurrentElement().getName();
		if(Path.equalsIgnoreCase("New")){
			Result=sv.Verify_NewScopeName(ScopeName_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			Result=sv.Verify_ModScopeName(GridID,ScopeName_Act);
		}
		Description= ScopeName_Act+" is displayed in the Scope Name field.";
		System.out.println("Vertex:"+Vertex+"; Description=:"+Description);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void v_ScopeStatus() throws InterruptedException{
		Vertex= getCurrentElement().getName();
		/**if(Path.equalsIgnoreCase("New")){
			Result=sv.Verify_NewScopeStatus(ScopeStatus);
		}else if(Path.equalsIgnoreCase("Modify")){
			Result=sv.Verify_ModScopeStatus(GridID,ScopeStatus);
		}**/
		//Expected= ScopeStatus+" is displayed in the Scope Status field.";
		System.out.println("Vertex:"+Vertex+"; Scope Status is verified in the v_ScopeSaved");
		//TestHelper.StepWriter1(Vertex,"Scope Status is verified in the v_ScopeSaved","Scope Status", "Pass");
		Description="Scope Status is verified";
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void v_ScopeFacility() {
		Vertex= getCurrentElement().getName();
		if(Path.equalsIgnoreCase("New")){
			Result=sv.Verify_New_Facility_Selection(UpdatedScopeFacility);
		}else if(Path.equalsIgnoreCase("Modify")){
			Result=sv.Verify_Modify_Facility_Selection(GridID,UpdatedScopeFacility);
		}
		Description= UpdatedScopeFacility+" is displayed in the Facility field.";
		System.out.println("Vertex:"+Vertex+"; Description=:"+Description);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void v_ScopeType() throws InterruptedException{
		Vertex= getCurrentElement().getName();
		if(Path.equalsIgnoreCase("New")){
			Result=sv.Verify_NewScopeType(ScopeType_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			Result=sv.Verify_ModScopeType(GridID,ScopeType_Act);
		}
		Description= ScopeType_Act+" is displayed in the Scope Type field.";
		System.out.println("Vertex:"+Vertex+"; Description=:"+Description);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void v_ScopeRFUID() throws InterruptedException{
		Vertex= getCurrentElement().getName();
		if(Path.equalsIgnoreCase("New")){
			Result=sv.Verify_NewRFUID(ScopeRF_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			Result=sv.Verify_ModRFUID(GridID,ScopeRF_Act);
		}
		Description= ScopeRF_Act+" is displayed in the ScopeID field.";
		System.out.println("Vertex:"+Vertex+"; Description=:"+Description);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void v_ScopeSNo() throws InterruptedException{
		Vertex= getCurrentElement().getName();
		if(Path.equalsIgnoreCase("New")){
			Result=sv.Verify_NewSerialNumber(ScopeSNo_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			Result=sv.Verify_ModSerialNumber(GridID,ScopeSNo_Act);
		}
		Description= ScopeSNo_Act+" is displayed in the Scope Serial Number field.";
		System.out.println("Vertex:"+Vertex+"; Description=:"+Description);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void v_ScopeComment() throws InterruptedException{
		Vertex= getCurrentElement().getName();
		if(Path.equalsIgnoreCase("New")){
			Result=sv.Verify_NewComment(ScopeComment_Act);
		}else if(Path.equalsIgnoreCase("Modify")){
			Result=sv.Verify_ModComment(GridID,ScopeComment_Act);
		}
		Description= ScopeComment_Act+" is displayed in the Scope Comment field.";
		System.out.println("Vertex:"+Vertex+"; Description=:"+Description);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	public void v_SaveToDefaultName() throws InterruptedException{
		Vertex= getCurrentElement().getName();
		String serialNumberSuffix = (ScopeSNo_Act.length() > 6 ? ScopeSNo_Act.substring(ScopeSNo_Act.length() - 6) : ScopeSNo_Act);
		ScopeName_Act=ScopeType_Act+"_"+serialNumberSuffix;
		//System.out.println("v_SaveToDefaultName; ScopeName_Act"+ScopeName_Act);
		Description= ScopeName_Act+" is displayed in the Scope Name field. Result="+Result;
		System.out.println("Vertex:"+Vertex+"; Description=:"+Description);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
	
	public void v_ScopeSaved() throws InterruptedException{
	
		//System.out.println(Path);
		Description="Scope is saved successfully.";
		//Expected="Scope is saved successfully.";
		Vertex= getCurrentElement().getName();
		System.out.println("Vertex="+Vertex+"; Expected="+Expected);
		
		sa.Search_Scope_ByName(ScopeName_Act);
		sa.Search_Scope_ByRFUID(ScopeRF_Act);
		sa.Search_Scope_BySerialNumber(ScopeSNo_Act);
		System.out.println("Searched for Scope ="+ScopeName_Act);

		GridID=sa.GetGridID_Scope_To_Modify(ScopeName_Act);
		System.out.println("Grid ID="+GridID);
		ModScopeAct_Val=sa.Scope_Active_Value(ScopeName_Act);

		sa.Select_Scope_To_Modify(ScopeName_Act);
		System.out.println("Selected Scope Type ="+ScopeName_Act);
		
		// verification for status checked after save
		//ModScopeAct_Val=sa.Scope_Active_Value(GridID);
		Result=sv.Verify_Modify_Facility_Selection(GridID, UpdatedScopeFacility);
		CommentResult=sv.Verify_ModComment(GridID, ScopeComment_Act);
		SNoResult=sv.Verify_ModSerialNumber(GridID, ScopeSNo_Act);
		RFUIDResult=sv.Verify_ModRFUID(GridID, ScopeRF_Act);
		STResult=sv.Verify_ModScopeType(GridID, ScopeType_Act);
		sa.Cancel_Scope_Edit();
		System.out.println("Cancel Edit");
		
		if(!GridID.equalsIgnoreCase(null) && ModScopeAct_Val.equalsIgnoreCase(ScopeStatus)&&Result.equalsIgnoreCase("Pass")&&CommentResult.equalsIgnoreCase("Pass")&&SNoResult.equalsIgnoreCase("Pass")&&RFUIDResult.equalsIgnoreCase("Pass")&&STResult.equalsIgnoreCase("Pass")){ //If the GridID is Null and current Scope Status equals expected Scope Status then the save failed. If GridID is not null the save passed. 
			Result="Pass";
			try{ //If the save was successful then update the Test Database with the new row if the Flow is New or update the modified row if the path is Modify.
				conn=DriverManager.getConnection(TestFrameWork.TestHelper.FrameworkDBConnection());

				Statement statement = conn.createStatement();
				Statement update= conn.createStatement();
				Statement insert= conn.createStatement();	
				if(Path.equalsIgnoreCase("New")){
					stm="Insert into scope(ScopeName, SerialNumber, RFUID, ScopeTypeID, FacilityID, ScopeStatus, UpdateDate, TestKeyword, Comment) values('"+ScopeName_Act+"', '"+ScopeSNo_Act+"', '"+ScopeRF_Act+"', '"+ScopeType_DB+"', '"+UpdatedFacilityDB+"', '"+ScopeStatus+"', CURRENT_TIMESTAMP, 'Existing', '"+ScopeComment_Act+"' )";
					insert.execute(stm); 
					insert.close();
				} else if(Path.equalsIgnoreCase("Modify")){
					stm="Update scope SET ScopeName='"+ScopeName_Act+"', SerialNumber='"+ScopeSNo_Act+"', RFUID='"+ScopeRF_Act+"', ScopeTypeID='"+ScopeType_DB+"', FacilityID='"+UpdatedFacilityDB+"', ScopeStatus='"+ScopeStatus+"', UpdateDate=CURRENT_TIMESTAMP, Comment='"+ScopeComment_Act+"' WHERE idScope="+ModifyScopeDB;
					update.executeUpdate(stm); // update the UpdateDate variable of the row of data used to the current date/time stamp.
					update.close();
				}
				System.out.println(stm);

				conn.close();
			}
			catch (SQLException ex){
			    // handle any errors
			    System.out.println("SQLException: " + ex.getMessage());
			    System.out.println("SQLState: " + ex.getSQLState());
			    System.out.println("VendorError: " + ex.getErrorCode());	
			}
		}
		else{
			Result="#Failed!#";
		}
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
			
}
	
	public void v_ScopeSaveErr() throws InterruptedException{
		Vertex= getCurrentElement().getName();
		if(ScopeSNo.equalsIgnoreCase("SMSameSNoExisting")){
			ErrCode="4";
		} else if(ScopeType.equalsIgnoreCase("") || ScopeSNo.equalsIgnoreCase("") ){ //Entering 'null' in the Scope name will result in an error message indicating the name cannot be empty. 
			ErrCode="5";
		} else if(ScopeName.equalsIgnoreCase("Existing") || ScopeRF.equalsIgnoreCase("Existing")){ //Entering 'existing' in the Scope name will result in an error message indicating the name must be unique.
			ErrCode="4";
		} else {
			ErrCode="5";
			
		}
		Result=SE_Gen.Verify_ErrCode(ErrCode);
		Description= "The scope details are NOT saved and an error message is displayed due to Error Code="+ErrCode;
		System.out.println("Vertex:"+Vertex+"; Description=:"+Description);
		//TestHelper.StepWriter1(Vertex, Description, Expected, Result);
		actualResult=actualResult+"\r\n"+getCurrentElement().getName()+"---:\r\n\t"+Result+" - "+Description;
		TH.WriteToTextFile(TestResFileName+ForFileName,actualResult);
	}
}
